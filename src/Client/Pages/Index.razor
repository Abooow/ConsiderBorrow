@page "/"
@using ConsiderBorrow.Shared.Models.LibraryItems;
@inject ILibraryItemFacade LibraryItemFacade
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

@if (libraryItems is null)
{
    <div class="h-100 d-flex justify-center align-center">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
else if (libraryItems.Count == 0)
{
    <div class="h-100 d-flex justify-center align-center">
        <MudText Typo="Typo.h4">No Items To Display</MudText>
    </div>
}
else
{
    <div class="pa-12">
        @if (hasCreatedNewItem)
        {
            <MudAlert Class="mb-6" Severity="Severity.Warning">A new item has been created. Please refresh the page to see the updated content.</MudAlert>
        }

        <div class="d-flex justify-space-between mb-6">
            <MudSelect T="string" Label="Sort" @bind-Value="sortType" AnchorOrigin="Origin.BottomCenter" Dense="true" Style="max-width: 210px;">
                <MudSelectItem Value="@("Category Name")" />
                <MudSelectItem Value="@("Type")" />
            </MudSelect>

            <MudButton OnClick="CreateNewLibraryItem" Color="Color.Secondary" Variant="Variant.Outlined">Add New</MudButton>
        </div>

        <div class="gap-4 mb-12" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));">
            @foreach (var item in libraryItems)
            {
                <LibraryItemCard Item="item" />
            }
        </div>

        @if (canLoadMoreItems)
        {
            <div class="d-flex justify-center">
                <MudButton OnClick="GetNextPageAsync" Color="Color.Secondary">Load More</MudButton>
            </div>
        }
    </div>
}

@code {
    private List<LibraryItemResponse>? libraryItems;

    private bool hasCreatedNewItem;

    private int currentPage;
    private bool canLoadMoreItems;
    private string _sortType = "Category Name";
    private string sortType
    {
        get => _sortType;
        set
        {
            if (_sortType == value)
                return;

            _sortType = value;
            InvokeAsync(ResetLoadedItems);
        }
    }

    private const int itemsPerPage = 7;

    protected override async Task OnInitializedAsync()
    {
        await GetNextPageAsync();
    }

    private async Task ResetLoadedItems()
    {
        currentPage = 0;
        libraryItems = null;
        canLoadMoreItems = false;
        await GetNextPageAsync();

        this.StateHasChanged();
    }

    private async Task GetNextPageAsync()
    {
        var newLibraryItems = await LibraryItemFacade.GetLibraryItemsAsync(currentPage++, itemsPerPage, sortType == "Type");

        canLoadMoreItems = newLibraryItems.Count() == itemsPerPage;

        if (libraryItems is null)
            libraryItems = new List<LibraryItemResponse>(newLibraryItems);
        else
            libraryItems!.AddRange(newLibraryItems);
    }

    private async Task CreateNewLibraryItem()
    {
        var result = await DialogService.Show<CreateNewLibraryItemDialog>("Create Library Item").Result;
        if (result.Canceled)
            return;

        hasCreatedNewItem = result.Data is not null;
        canLoadMoreItems |= hasCreatedNewItem;
    }
}