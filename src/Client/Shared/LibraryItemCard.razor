@using ConsiderBorrow.Shared.Models.LibraryItems;
@inject ILibraryItemFacade LibraryItemFacade
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="library-card d-flex flex-column justify-space-between px-4 py-2">
    <MudIconButton Class="library-card-settings" Icon="@Icons.Material.Filled.Settings" OnClick="EditItem" />

    <div class="mb-4">
        <div class="d-flex justify-center">
            <MudChip Variant="Variant.Text" Color="Color.Secondary" Size="Size.Small">@Item.Type</MudChip>
        </div>
        <div class="library-card-cover my-2">
            <img src="@DefaultImageProvider.GetDefaultImage(Item.Type)" />
        </div>

        <div class="d-flex flex-column align-center">
            @if (Item.Pages is not null)
            {
                <MudText Typo="Typo.body2" Style="font-size: 12px;">@Item.Pages @(Item.Pages == 1 ? "page" : "pages")</MudText>
            }
            @if (Item.RunTimeMinutes is not null)
            {
                <MudText Typo="Typo.body2" Style="font-size: 12px;">@Item.RunTimeMinutes @(Item.RunTimeMinutes == 1 ? "minute" : "minutes")</MudText>
            }

            <MudText Style="font-weight: bold;">@Item.Title (@Item.TitleAcronym)</MudText>

            @if (Item.Author is not null)
            {
                <MudText Typo="Typo.body2">@Item.Author</MudText>
            }

            <MudChip Variant="Variant.Text" Color="Color.Primary" Size="Size.Small">@Item.Category</MudChip>
        </div>
    </div>

    <div class="d-flex flex-column gap-2">
        @if (Item.CanBeBorrowed)
        {
            if (Item.HasBeenBorrowed)
            {
                <MudTooltip RootClass="w-100" Text="@($"Item has been borrowed by {Item.Borrower}")">
                    <MudButton FullWidth="true" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ReturnItem">Return</MudButton>
                </MudTooltip>
            }
            else
            {
                <MudButton FullWidth="true" Color="Color.Primary" Variant="Variant.Filled" OnClick="CheckOutItem">Check Out</MudButton>
            }
        }

        <MudButton FullWidth="true" Color="Color.Secondary" Variant="Variant.Text" OnClick="ShowMoreInfo">Info</MudButton>
    </div>
</MudPaper>

@code {
    [Parameter]
    [EditorRequired]
    public required LibraryItemResponse Item { get; set; }

    [Parameter]
    public EventCallback<LibraryItemUpdated> OnItemUpdated { get; set; }

    private async Task CheckOutItem()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(CheckOutLibraryItemDialog.Item), Item);

        var dialogResult = await DialogService.Show<CheckOutLibraryItemDialog>("Check Out Item", parameters).Result;
        if (dialogResult.Canceled)
            return;

        await OnItemUpdated.InvokeAsync(new LibraryItemUpdated(Item, (LibraryItemResponse)dialogResult.Data));
    }

    private async Task ReturnItem()
    {
        var result = await LibraryItemFacade.ReturnLibraryItemAsync(Item.Id);
        if (!result.Succeeded)
        {
            Snackbar.Add(string.Join(", ", result.Messages), Severity.Error);
            return;
        }

        await OnItemUpdated.InvokeAsync(new LibraryItemUpdated(Item, result.Data!));
    }

    private async Task EditItem()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(EditLibraryItemDialog.Item), Item);

        var dialogResult = await DialogService.Show<EditLibraryItemDialog>("Edit Item", parameters).Result;
        if (dialogResult.Canceled)
            return;

        await OnItemUpdated.InvokeAsync(new LibraryItemUpdated(Item, (LibraryItemResponse)dialogResult.Data));
    }

    private void ShowMoreInfo()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(LibraryItemInfoDialog.Item), Item);

        DialogService.Show<LibraryItemInfoDialog>("Info", parameters);
    }
}
